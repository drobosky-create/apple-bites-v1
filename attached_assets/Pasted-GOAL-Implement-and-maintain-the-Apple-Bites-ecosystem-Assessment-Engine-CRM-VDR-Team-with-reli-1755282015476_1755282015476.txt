GOAL
Implement and maintain the Apple Bites ecosystem (Assessment Engine, CRM, VDR, Team) with reliable, maintainable integrations and a clean, testable codebase.

CODEBASE CONTEXT (DO NOT CHANGE)
- Primary repo: https://github.com/drobosky-create/applebites-v1
- Work on branch: ecosystem-modules
- UI stack: React 18 + TypeScript + Material Dashboard React components (MDBox, MDTypography, MDButton, DataGrid, etc.)
- Reuse existing layout, patterns, and components from applebites-v1. NO custom CSS frameworks. NO Grid2 (use standard MUI Grid).
- Apple Bites platform already deployed with tag-based GHL integration (NO webhooks).

ACCESS MODEL (ENFORCE IN ROUTES/AUTHZ)
- Two top-level spaces:
  1) /portal (Client/Consumer): historical Assessments + invited Deals’ Data Rooms (read-only unless folder ACL grants upload/manage).
  2) /workspace (Internal/Meritage): CRM, VDR, Team, Assessments(Admin).
- Roles (RBAC + object ACLs):
  • Client: portal-only. View own assessments; view/upload only in invited VDR folders.
  • Client Admin: portal; manage their org’s users within invited VDR room.
  • Analyst (internal): read/write assigned deals and rooms.
  • Deal Lead (internal): full on assigned deals/rooms; invite client/buyer; manage folder ACLs.
  • VDR Manager (internal): manage assigned rooms.
  • Ops Manager (internal): create deals, rooms, templates; manage internal assignments.
  • Admin (internal): full.
- Scopes to use in code (strings): 
  assessments:view:self | assessments:view:org | crm:deal:{read|write|admin} | vdr:room:{read|upload|manage} | team:{read|manage}
- Object ACL pattern: {objectType}:{objectId}:{subjectType}:{subjectId}:{scope}

LEAD & DATA FLOW (NO WEBHOOKS — TAGS ONLY)
- Ingest sources: GHL tags, Assessment completion, manual import.
- Tags:
  • Tiers: tier:free | tier:growth | tier:capital
  • Status: status:new | status:qualified | status:nurture | status:won | status:lost
  • Sources: source:fb | source:li | source:referral | source:site | source:event
- Ingest rules:
  1) Any contact in GHL with a tier:* tag → upsert Firm (by domain if present), upsert Contact (dedupe by email→email+phone→fuzzy name+firm), ensure one open Opportunity per firm/contact.
  2) Assessment completion attaches to Opportunity; compute valuation band; store score/fit.
  3) Promotion rule (configurable): if fit ≥ threshold or manually promoted → create Deal, stage “Pre-LOI,” optionally scaffold VDR Room from template, assign Deal Lead + Analyst.

DATA MODEL (MINIMUM CONTRACT — KEEP TYPES STRICT)
Firm(id, name, domain, size, naics, geography, notes)
Contact(id, firmId, first, last, email, phone, title, ownerId)
Opportunity(id, firmId, primaryContactId, tier, source, status, score, estValue, ownerId)
Assessment(id, firmId, contactId, opportunityId, tier, ebitda, adjustments, valueLow, valueHigh, reportUrl, createdAt)
Deal(id, firmId, name, stage, feeModel, expectedClose, ownerId)
Milestone(id, dealId, type, dueAt, doneAt, assigneeId)
VDR Room(id, dealId, name, policyTemplateId, status)
VDR Folder(id, roomId, path, visibilityRule)
VDR Doc(id, roomId, folderId, name, version, storageKey, checksum, uploadedBy, uploadedAt)
Access(id, objectType, objectId, subjectType{user|role|firm}, subjectId, scope)
Audit(id, actorId, action, objectType, objectId, ip, ts)
Invite(id, roomId?, dealId?, email, role, expiresAt, acceptedAt)

UI ROUTING (USE EXISTING MD COMPONENTS)
- /portal
  • Assessments (history grid + “Start New Assessment”)
  • Data Rooms (invited only) — tree left / files right / Share (clients see only allowed folders)
- /workspace
  • CRM: Tabs = Kanban (drag/drop), List (DataGrid), Calendar (expectedClose), Targets (lists + bulk assign), Reports (cards/charts)
  • VDR: Rooms list; Room view (folder tree, files, versioning, Share modal with folder-level ACLs)
  • Team: internal directory/roles/assignments
  • Assessments(Admin): cross-org searchable grid; “Promote to Opportunity/Deal”

HARD CONSTRAINTS — ANTI-PHANTOM CODE PROTOCOL
1) BEFORE WRITING CODE:
   - READ package.json to discover scripts; DO NOT assume script names.
   - ENUMERATE existing components/paths you plan to import from; VERIFY they exist (search the repo).
   - LIST exact files to create/modify with full relative paths that already exist (for modifies) or new files under existing directories (for creates).
2) IF A TARGET IMPORT OR PATH DOES NOT EXIST:
   - DO NOT invent it.
   - EITHER (a) choose an existing, verified alternative, OR (b) create a minimal, local component in the same feature folder and import from that exact path.
3) UI COMPONENTS:
   - Prefer existing applebites-v1 Material Dashboard components that are present in repo.
   - DO NOT import Grid2; use MUI Grid.
   - No new external deps without first checking if they are already in package.json.
4) TYPES & API:
   - Create/extend TypeScript types in a central types file if such a file exists; otherwise co-locate types next to feature with explicit exports.
   - Align API DTOs with existing backend routes. If an endpoint is missing, create a typed client wrapper but gate calls behind a feature flag and return mocked data from a local fixture until the backend exists.
5) FEATURE FLAGS:
   - Add feature flags for new views/routes (e.g., FEATURE_CRM_REPORTS) and default them to TRUE only if all imports compile.
6) SAFE EDIT LOOP:
   - For each task, output a PLAN → FILE IMPACT LIST → DIFFS (unified format) → POST-CHECKS (typecheck summary).
   - Run TypeScript check and linter; collect and FIX all errors before concluding.
   - If any error references a missing symbol/file, STOP and adjust to an existing path or create a local minimal stub.

IMPLEMENTATION ORDER (WHEN ASKED TO BUILD)
1) Permissions middleware + route guards (RBAC + object ACL check function).
2) Route split: /portal vs /workspace with protected internal routes.
3) Portal Assessments history (client-only data scope).
4) CRM 5-tab shell using existing MD components + stub data providers.
5) Deal→VDR flow: create room from template, folder ACLs, share modal.
6) GHL tag ingestion mapping → Opportunity upsert service (idempotent).

COMMIT & PR CHECKLIST
- Conventional commits (feat:, fix:, refactor:, chore:, docs:).
- Include: WHAT changed, WHY, and HOW tested.
- Screenshots/GIFs of new views.
- Confirm: no Grid2, no phantom imports, no new deps without package.json verification.
- Confirm: yarn/pnpm/npm scripts used match package.json.

RUNTIME NOTES
- NEVER assume environment variables or script names. READ .env.example and package.json first.
- If a dataset or constants file is referenced (e.g., NAICS/EBITDA ranges), check if it exists. If not, place under /src/lib/data/ (or existing data dir), export named constants, and add unit-friendly pure functions.

ON UNCERTAINTY
- Prefer minimal viable stubs and explicit TODOs over guessing.
- DO NOT fabricate successful builds. Report exact errors and fix them in-place with verified imports/paths.

END SYSTEM PROMPT