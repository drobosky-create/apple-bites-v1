Quick sanity checks (2 mins)

In Stripe → Products → Growth & Exit Assessment: make sure the $1,995 Price is Active and the $795 Price is Archived (or at least Inactive). This prevents accidental auto‑selection of the old one.

Copy the new Price ID (looks like price_...).

1) If your checkout is GHL native “Order Form”

GHL order forms don’t auto‑swap Stripe Price IDs when you change a product in Stripe.

Fix

Payments → Products (GHL)

Click + New Product (don’t edit the old one).

Connect to the SAME Stripe product, select the new $1,995 Price.

Name it clearly (e.g., “Assessment – $1,995”).

Funnels/Websites → Your landing/checkout step

Open the Order Form element → Products tab.

Remove the old GHL product.

Add the new GHL product you just created.

Publish the funnel step.

Coupons (GHL)

In Payments → Coupons, create the coupon there and toggle Allow coupons on the Order Form element.

(Coupons created in Stripe won’t work on a GHL native order form—use GHL coupons for GHL checkout.)

Why this works: GHL treats a Stripe price as immutable. Swapping to a new Price ID = making a new GHL product and attaching it to the form.

2) If your checkout is Stripe Checkout / Stripe Elements (custom)

Your Replit backend now fetches the newest active price (great), but the front end or session‑creation code might still be passing the old Price ID.

Fix

In the code that creates the Checkout Session or PaymentIntent, confirm you’re using the fresh price_id from your /api/stripe/refresh-pricing (or similar) response at request time.

For Stripe coupons, ensure you use promotion codes and pass one of the following when creating the session:

allow_promotion_codes: true, or

discounts: [{promotion_code: 'promo_...'}]
(Stripe coupons/promotion codes only work if you’re on Stripe Checkout/Elements, not GHL native.)

Purge caches: add a cache‑buster to your client fetch:
fetch('/api/stripe/refresh-pricing?v=' + Date.now())
Make sure your API sends permissive CORS headers to your GHL domain; otherwise the page can’t read the new price and will fall back to old text.

3) Your landing page still shows $795 (display text vs. live data)

Even if the backend is correct, GHL pages often have static text somewhere (hero, FAQ, button labels) that still says “$795”.

Fix audit (5 mins)

In the GHL editor, Search the page for “795”. Update all text blocks (hero, bullets, footers, popups).

Republish the step, then open in an incognito window.

If you rely on dynamic JS to show the price: open DevTools → Network tab → reload → confirm your /api/stripe/... call returns $1,995 and is not blocked by CORS.

4) Coupon failures: pick the lane

Using GHL native order form? Create/manage coupons in GHL → Payments → Coupons. Stripe promo codes won’t apply here.

Using Stripe Checkout/Elements? Create Coupons + Promotion Codes in Stripe, and pass allow_promotion_codes (or explicit discounts) when you create the session.

(If you mix the two, coupons will “fail” because each system expects its own.)

5) Belt-and-suspenders clean‑up

Archive the $795 Stripe price so nobody (or GHL) can pick it.

Disable the old GHL product so it can’t be added to forms.

In GHL Settings → Domains → Advanced, click Clear Cache (if available).

Re‑publish the funnel step after swapping products.

Likely root cause in your setup

The landing page and cart are GHL native, still tied to the old GHL product (which points to the $795 Price ID), and coupons are being tested as Stripe promo codes on a GHL checkout. So you’re seeing $795 and “coupon not accepted.”