Hybrid Signup Page Plan
We’ll combine:

🧩 From Material Dashboard PRO (your screenshot):
Left side: A static image or color block with visual appeal

Two-column layout using MUI Grid

Card form structure, centered and elevated

🍏 From Apple Bites (your Replit build):
Logo

Gradient background

Rounded white form card

Modern MDInputs with icon adornments

Password validation feedback

Teal/Navy gradient button styling

Apple Bites typography and spacing

🧱 Hybrid Layout Skeleton (React + MUI):
Here's the refactored SignupPage.tsx component:

tsx
Copy
Edit
import React, { useState } from 'react';
import { Link, useLocation } from 'wouter';
import { Grid, Box, Typography, Button, useTheme } from '@mui/material';
import { Eye, EyeOff, Mail, User, Building, CheckCircle, X } from 'lucide-react';
import MDInput from '@/components/MD/MDInput';
import appleBitesLogo from '@assets/apple-bites-logo.png';

const PasswordRequirement = ({ met, text }: { met: boolean; text: string }) => (
  <Box display="flex" alignItems="center" gap={1} mb={0.5}>
    {met ? <CheckCircle size={14} color="#10B981" /> : <X size={14} color="#EF4444" />}
    <Typography fontSize={12} sx={{ color: met ? '#10B981' : '#6B7280' }}>
      {text}
    </Typography>
  </Box>
);

export default function HybridSignupPage() {
  const theme = useTheme();
  const [, setLocation] = useLocation();

  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    password: '',
    confirmPassword: '',
    company: '',
    title: ''
  });

  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const passwordRequirements = {
    length: formData.password.length >= 8,
    uppercase: /[A-Z]/.test(formData.password),
    lowercase: /[a-z]/.test(formData.password),
    number: /\d/.test(formData.password),
    special: /[!@#$%^&*(),.?":{}|<>]/.test(formData.password)
  };

  const isPasswordValid = Object.values(passwordRequirements).every(Boolean);
  const passwordsMatch = formData.password === formData.confirmPassword && formData.confirmPassword.length > 0;

  const handleInputChange = (field: string) => (e: React.ChangeEvent<HTMLInputElement>) => {
    setFormData(prev => ({ ...prev, [field]: e.target.value }));
    if (error) setError('');
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!isPasswordValid) return setError('Password does not meet requirements');
    if (!passwordsMatch) return setError('Passwords do not match');
    setIsLoading(true);

    try {
      const res = await fetch('/api/signup', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify(formData)
      });

      const data = await res.json();
      res.ok ? setLocation('/dashboard') : setError(data.message || 'Signup failed');
    } catch {
      setError('Network error. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Grid container sx={{ minHeight: '100vh' }}>
      {/* Left Visual Section */}
      <Grid
        item
        xs={false}
        sm={5}
        md={6}
        sx={{
          backgroundImage: 'url(/background.jpg)',
          backgroundRepeat: 'no-repeat',
          backgroundSize: 'cover',
          backgroundPosition: 'center',
        }}
      />

      {/* Right Signup Form */}
      <Grid item xs={12} sm={7} md={6}>
        <Box
          sx={{
            height: '100%',
            background: 'linear-gradient(135deg, #0A1F44 0%, #1B2C4F 100%)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            px: 4,
            py: 6
          }}
        >
          <Box
            component="form"
            onSubmit={handleSubmit}
            sx={{
              width: '100%',
              maxWidth: 500,
              backgroundColor: 'white',
              borderRadius: 3,
              p: 4,
              boxShadow: 4
            }}
          >
            {/* Logo */}
            <Box textAlign="center" mb={3}>
              <img src={appleBitesLogo} alt="Apple Bites" style={{ height: 60 }} />
              <Typography variant="h5" fontWeight="bold" mt={1}>
                Create Your Account
              </Typography>
              <Typography variant="body2" color="text.secondary">
                Start your business valuation journey
              </Typography>
            </Box>

            {/* Error */}
            {error && (
              <Box bgcolor="#FEF2F2" border="1px solid #FECACA" borderRadius={2} p={2} mb={2}>
                <Typography color="#DC2626" fontSize={14}>
                  {error}
                </Typography>
              </Box>
            )}

            {/* Form Fields */}
            <Grid container spacing={2}>
              <Grid item xs={6}>
                <MDInput label="First Name" value={formData.firstName} onChange={handleInputChange('firstName')} fullWidth required />
              </Grid>
              <Grid item xs={6}>
                <MDInput label="Last Name" value={formData.lastName} onChange={handleInputChange('lastName')} fullWidth required />
              </Grid>
              <Grid item xs={12}>
                <MDInput label="Email" value={formData.email} onChange={handleInputChange('email')} type="email" fullWidth required />
              </Grid>
              <Grid item xs={6}>
                <MDInput label="Company" value={formData.company} onChange={handleInputChange('company')} fullWidth />
              </Grid>
              <Grid item xs={6}>
                <MDInput label="Title" value={formData.title} onChange={handleInputChange('title')} fullWidth />
              </Grid>
              <Grid item xs={12}>
                <MDInput
                  label="Password"
                  type={showPassword ? 'text' : 'password'}
                  value={formData.password}
                  onChange={handleInputChange('password')}
                  fullWidth
                  required
                  endAdornment={
                    <button
                      type="button"
                      onClick={() => setShowPassword(!showPassword)}
                      style={{ background: 'none', border: 'none', cursor: 'pointer' }}
                    >
                      {showPassword ? <EyeOff size={18} /> : <Eye size={18} />}
                    </button>
                  }
                />
                {formData.password && (
                  <Box mt={2}>
                    <Typography variant="caption" fontWeight="medium" display="block">
                      Password Requirements:
                    </Typography>
                    {Object.entries(passwordRequirements).map(([key, met]) => (
                      <PasswordRequirement key={key} met={met} text={key} />
                    ))}
                  </Box>
                )}
              </Grid>
              <Grid item xs={12}>
                <MDInput
                  label="Confirm Password"
                  type={showConfirmPassword ? 'text' : 'password'}
                  value={formData.confirmPassword}
                  onChange={handleInputChange('confirmPassword')}
                  fullWidth
                  required
                  endAdornment={
                    <button
                      type="button"
                      onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                      style={{ background: 'none', border: 'none', cursor: 'pointer' }}
                    >
                      {showConfirmPassword ? <EyeOff size={18} /> : <Eye size={18} />}
                    </button>
                  }
                />
                {!passwordsMatch && formData.confirmPassword && (
                  <Typography variant="caption" color="#EF4444" display="block" mt={1}>
                    Passwords do not match
                  </Typography>
                )}
              </Grid>
            </Grid>

            {/* Submit Button */}
            <Button
              type="submit"
              disabled={isLoading || !isPasswordValid || !passwordsMatch}
              sx={{
                mt: 3,
                width: '100%',
                py: 1.5,
                fontWeight: 'bold',
                background: 'linear-gradient(135deg, #00BFA6 0%, #0A1F44 100%)',
                color: 'white',
                borderRadius: 2,
                textTransform: 'none',
                '&:hover': {
                  background: 'linear-gradient(135deg, #00BFA6 0%, #33FFC5 100%)',
                  boxShadow: '0 8px 25px -8px rgba(0,191,166,0.4)'
                }
              }}
            >
              {isLoading ? 'Creating Account...' : 'Create Account'}
            </Button>

            {/* Sign In Redirect */}
            <Box textAlign="center" mt={3}>
              <Typography variant="body2" color="text.secondary">
                Already have an account?{' '}
                <Link href="/login">
                  <Typography component="span" color="#00BFA6" fontWeight="medium" sx={{ cursor: 'pointer' }}>
                    Sign in here
                  </Typography>
                </Link>
              </Typography>
            </Box>
          </Box>
        </Box>
      </Grid>
    </Grid>
  );
}
