Objective:
Build a secure React + Node.js app (frontend/backend) with PostgreSQL integration. This app will live behind a GHL-triggered link and must validate access before rendering assessments.

✅ Route Structure (ONLY these 3)
/assessment/basic → Tier 1 assessment (Free)

/assessment/growth → Tier 2 paid assessment ($795)

/admin or /admin/login → Admin-only login/dashboard

🔐 Access Protection Requirements
No public access to assessments without verification

Access must be granted via a secure token system

Token System:
Accept time-sensitive access tokens via query string (e.g., ?token=abc123)

Each token should:

Be generated from GoHighLevel (GHL) workflow

Expire after a preset duration (e.g., 1 hour)

Be single-use

Be stored/validated in PostgreSQL (tokens table)

If GHL cannot natively generate tokens, Replit should expose an endpoint (e.g. /generate-token) that GHL can call via webhook to return a secure token, store it, and send it to the user by URL merge field.

💳 Payment Flow (Managed in GHL)
All payment happens outside of Replit (in GHL)

Upon payment, GHL sends the user to /assessment/growth?token=abc123

The app must validate the token before loading the page

📝 Data Flow
Assessment form data should be submitted via POST and saved in PostgreSQL:

Table structure: submissions, value_drivers, users, tokens

Once submission is complete:

Replit app sends payload via webhook to GHL (endpoint will be provided)

Payload includes: contact ID, score summary, key answers

After submission, DO NOT redirect to a Thank You screen — instead:

Render the results page, which shows:

Score heatmap

Scoring breakdown (e.g. by A–F grades)

Action buttons: “Download Report,” “Schedule Call,” etc.

📤 Post-Assessment Workflow (Handoff to GHL)
DO NOT generate PDF or send emails from Replit

After submission, Replit displays the results

GHL handles:

Email automation

PDF generation

Follow-up SMS

Calendar scheduling via automation

🔐 Admin Portal Requirements (/admin)
Password-protected login screen (basic auth or JWT login)

Admin view should include:

Submission search/filter

Token issuance dashboard (generate link buttons)

Option to revoke tokens manually

🧩 Stretch Goals (Optional for later)
NAICS-code-based logic for valuation multipliers

Allow dynamic quiz config (from JSON or CMS)

PDF export button on results screen (optional if not GHL-handled)